{"version":3,"file":"driver.service.js","sourceRoot":"","sources":["../../../src/services/driver/driver.service.ts"],"names":[],"mappings":";;;AAAA,6CAA2C;AAE3C,uCAA+B;AAE/B,MAAM,aAAa;IACjB,YAAY,CAAC,MAAgC;QAC3C,MAAM,cAAc,GAAG,IAAI,sBAAW,CAAC,MAAM,CAAC,CAAC;QAE/C,OAAO,cAAc,CAAC,IAAI,EAAE,CAAC;IAC/B,CAAC;IACD,cAAc,CAAC,EAAU,EAAE,WAAiC;QAC1D,OAAO,sBAAW,CAAC,MAAM,CACvB,EAAC,GAAG,EAAE,gBAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAC,EACzB;YACE,KAAK,EAAE;gBACL,MAAM,EAAE,WAAkB;aAC3B;SACF,CAAQ,CAAC;IACd,CAAC;IACD,eAAe,CAAC,UAAoC;QAClD,OAAO,sBAAW,CAAC,OAAO,CAAC,EAAC,UAAU,EAAC,CAAC,CAAC;IAC3C,CAAC;CACF;AAEY,QAAA,aAAa,GAAG,IAAI,aAAa,EAAE,CAAC","sourcesContent":["import {DriverModel} from '../../database';\r\nimport {DriverInterface, DriverTokenInterface} from '../../models';\r\nimport {Types} from 'mongoose';\r\n\r\nclass DriverService {\r\n  createDriver(driver: Partial<DriverInterface>) {\r\n    const driverToCreate = new DriverModel(driver);\r\n\r\n    return driverToCreate.save();\r\n  }\r\n  addActionToken(id: string, tokenObject: DriverTokenInterface): Promise<DriverInterface> {\r\n    return DriverModel.update(\r\n      {_id: Types.ObjectId(id)},\r\n      {\r\n        $push: {\r\n          tokens: tokenObject as any\r\n        }\r\n      }) as any;\r\n  }\r\n  findOneByParams(findObject: Partial<DriverInterface>) {\r\n    return DriverModel.findOne({findObject});\r\n  }\r\n}\r\n\r\nexport const driverService = new DriverService();\r\n"]}