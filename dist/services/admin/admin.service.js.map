{"version":3,"file":"admin.service.js","sourceRoot":"","sources":["../../../src/services/admin/admin.service.ts"],"names":[],"mappings":";;;AAAA,6CAA0C;AAE1C,uCAA+B;AAE/B,MAAM,YAAY;IAChB,WAAW,CAAC,KAA8B;QACxC,MAAM,aAAa,GAAG,IAAI,qBAAU,CAAC,KAAK,CAAC,CAAC;QAE5C,OAAO,aAAa,CAAC,IAAI,EAAE,CAAC;IAC9B,CAAC;IACD,cAAc,CAAC,EAAU,EAAE,WAAgC;QACzD,OAAO,qBAAU,CAAC,MAAM,CACtB,EAAC,GAAG,EAAE,gBAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAC,EACzB;YACE,KAAK,EAAE;gBACL,MAAM,EAAE,WAAkB;aAC3B;SACF,CAAQ,CAAC;IACd,CAAC;IACD,eAAe,CAAC,UAAmC;QACjD,OAAO,qBAAU,CAAC,OAAO,CAAC,EAAC,UAAU,EAAC,CAAC,CAAC;IAC1C,CAAC;CACF;AAEY,QAAA,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC","sourcesContent":["import {AdminModel} from '../../database';\r\nimport {AdminInterface, AdminTokenInterface} from '../../models';\r\nimport {Types} from 'mongoose';\r\n\r\nclass AdminService {\r\n  createAdmin(admin: Partial<AdminInterface>) {\r\n    const adminToCreate = new AdminModel(admin);\r\n\r\n    return adminToCreate.save();\r\n  }\r\n  addActionToken(id: string, tokenObject: AdminTokenInterface): Promise<AdminInterface> {\r\n    return AdminModel.update(\r\n      {_id: Types.ObjectId(id)},\r\n      {\r\n        $push: {\r\n          tokens: tokenObject as any\r\n        }\r\n      }) as any;\r\n  }\r\n  findOneByParams(findObject: Partial<AdminInterface>) {\r\n    return AdminModel.findOne({findObject});\r\n  }\r\n}\r\n\r\nexport const adminService = new AdminService();\r\n"]}