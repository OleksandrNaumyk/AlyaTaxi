{"version":3,"file":"user.service.js","sourceRoot":"","sources":["../../../src/services/user/user.service.ts"],"names":[],"mappings":";;;AAAA,uCAA+B;AAE/B,6CAAyC;AAIzC,MAAM,WAAW;IACf,UAAU,CAAC,IAA4B;QACrC,MAAM,YAAY,GAAG,IAAI,oBAAS,CAAC,IAAI,CAAC,CAAC;QAEzC,OAAO,YAAY,CAAC,IAAI,EAAE,CAAC;IAC7B,CAAC;IACD,cAAc,CAAC,MAAc,EAAE,WAA+B;QAC5D,OAAO,oBAAS,CAAC,MAAM,CACrB,EAAC,GAAG,EAAE,gBAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAC,EAC7B;YACE,KAAK,EAAE;gBACL,MAAM,EAAE,WAAW;aACpB;SACF,CAAQ,CAAC;IACd,CAAC;IAED,kBAAkB,CAAC,MAA8B,EAAE,MAA8B;QAC/E,OAAO,oBAAS,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,EAAE,EAAC,GAAG,EAAE,IAAI,EAAC,CAAQ,CAAC;IACjE,CAAC;IAED,eAAe,CAAC,UAAkC;QAChD,OAAO,oBAAS,CAAC,OAAO,CAAC,UAAU,CAAQ,CAAC;IAC9C,CAAC;IAED,qBAAqB,CAAC,MAAkB,EAAE,KAAa;QACrD,OAAO,oBAAS,CAAC,OAAO,CAAC;YACvB,IAAI,EAAE;gBACJ,EAAC,eAAe,EAAE,MAAM,EAAC;gBACzB,EAAC,cAAc,EAAE,KAAK,EAAC;aACxB;SACF,CAAQ,CAAC;IACZ,CAAC;CAeF;AAEY,QAAA,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC","sourcesContent":["import {Types} from 'mongoose';\r\n\r\nimport {UserModel} from '../../database';\r\nimport {UserInterface, UserTokenInterface} from '../../models';\r\nimport {ActionEnum} from '../../constants';\r\n\r\nclass UserService {\r\n  createUser(user: Partial<UserInterface>): Promise<UserInterface> {\r\n    const userToCreate = new UserModel(user);\r\n\r\n    return userToCreate.save();\r\n  }\r\n  addActionToken(userId: string, tokenObject: UserTokenInterface): Promise<UserInterface> {\r\n    return UserModel.update(\r\n      {_id: Types.ObjectId(userId)},\r\n      {\r\n        $push: {\r\n          tokens: tokenObject\r\n        }\r\n      }) as any;\r\n  }\r\n\r\n  updateUserByParams(params: Partial<UserInterface>, update: Partial<UserInterface>): Promise<UserInterface> {\r\n    return UserModel.updateOne(params, update, {new: true}) as any;\r\n  }\r\n\r\n  findOneByParams(findObject: Partial<UserInterface>): Promise<UserInterface | null> {\r\n    return UserModel.findOne(findObject) as any;\r\n  }\r\n\r\n  findUserByActionToken(action: ActionEnum, token: string): Promise<UserInterface | null> {\r\n    return UserModel.findOne({\r\n      $and: [\r\n        {'tokens.action': action},\r\n        {'tokens.token': token}\r\n      ]\r\n    }) as any;\r\n  }\r\n\r\n  // removeActionToken(action: ActionEnum, token: string): Promise<UserInterface | null> {\r\n  //   return UserModel.update(\r\n  //     {},\r\n  //     {\r\n  //       $pull: {\r\n  //         $and: [\r\n  //           {'tokens.token': token},\r\n  //           {'tokens.action': action}\r\n  //         ]\r\n  //       } as any\r\n  //     }) as any;\r\n  // }\r\n\r\n}\r\n\r\nexport const userService = new UserService();\r\n"]}