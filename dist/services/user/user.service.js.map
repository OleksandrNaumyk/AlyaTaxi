{"version":3,"file":"user.service.js","sourceRoot":"","sources":["../../../src/services/user/user.service.ts"],"names":[],"mappings":";;;AAAA,uCAA+B;AAE/B,6CAAyC;AAGzC,MAAM,WAAW;IACf,UAAU,CAAC,IAA4B;QACrC,MAAM,YAAY,GAAG,IAAI,oBAAS,CAAC,IAAI,CAAC,CAAC;QAEzC,OAAO,YAAY,CAAC,IAAI,EAAE,CAAC;IAC7B,CAAC;IACD,cAAc,CAAC,EAAU,EAAE,WAA+B;QACxD,OAAO,oBAAS,CAAC,MAAM,CACrB,EAAC,GAAG,EAAE,gBAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAC,EACzB;YACE,KAAK,EAAE;gBACL,MAAM,EAAE,WAAkB;aAC3B;SACF,CAAQ,CAAC;IACd,CAAC;IACD,eAAe,CAAC,UAAkC;QAChD,OAAO,oBAAS,CAAC,OAAO,CAAC,UAAU,CAAQ,CAAC;IAC9C,CAAC;CACF;AAEY,QAAA,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC","sourcesContent":["import {Types} from 'mongoose';\r\n\r\nimport {UserModel} from '../../database';\r\nimport {UserInterface, UserTokenInterface} from '../../models';\r\n\r\nclass UserService {\r\n  createUser(user: Partial<UserInterface>): Promise<UserInterface> {\r\n    const userToCreate = new UserModel(user);\r\n\r\n    return userToCreate.save();\r\n  }\r\n  addActionToken(id: string, tokenObject: UserTokenInterface): Promise<UserInterface> {\r\n    return UserModel.update(\r\n      {_id: Types.ObjectId(id)},\r\n      {\r\n        $push: {\r\n          tokens: tokenObject as any\r\n        }\r\n      }) as any;\r\n  }\r\n  findOneByParams(findObject: Partial<UserInterface>): Promise<UserInterface | null> {\r\n    return UserModel.findOne(findObject) as any;\r\n  }\r\n}\r\n\r\nexport const userService = new UserService();\r\n"]}