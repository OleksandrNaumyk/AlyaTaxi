{"version":3,"file":"user.service.js","sourceRoot":"","sources":["../../../src/services/user/user.service.ts"],"names":[],"mappings":";;;AAAA,uCAA+B;AAE/B,6CAAyC;AAGzC,MAAM,WAAW;IACf,UAAU,CAAC,IAA4B;QACrC,MAAM,YAAY,GAAG,IAAI,oBAAS,CAAC,IAAI,CAAC,CAAC;QAEzC,OAAO,YAAY,CAAC,IAAI,EAAE,CAAC;IAC7B,CAAC;IACD,cAAc,CAAC,EAAU,EAAE,WAA+B;QACxD,OAAO,oBAAS,CAAC,SAAS,CAAC;YACzB;gBACE,MAAM,EAAE;oBACN,GAAG,EAAE,gBAAK,CAAC,QAAQ,CAAC,EAAE,CAAC;iBACxB;aACF;SACF,CAAC,CAAC;IACL,CAAC;IACD,eAAe,CAAC,UAAkC;QAChD,OAAO,oBAAS,CAAC,OAAO,CAAC,EAAC,UAAU,EAAC,CAAC,CAAC;IACzC,CAAC;CACF;AAEY,QAAA,WAAW,GAAG,IAAI,WAAW,EAAE,CAAC","sourcesContent":["import {Types} from 'mongoose';\r\n\r\nimport {UserModel} from '../../database';\r\nimport {UserInterface, UserTokenInterface} from '../../models';\r\n\r\nclass UserService {\r\n  createUser(user: Partial<UserInterface>) {\r\n    const userToCreate = new UserModel(user);\r\n\r\n    return userToCreate.save();\r\n  }\r\n  addActionToken(id: string, tokenObject: UserTokenInterface) {\r\n    return UserModel.aggregate([\r\n      {\r\n        $match: {\r\n          _id: Types.ObjectId(id)\r\n        }\r\n      }\r\n    ]);\r\n  }\r\n  findOneByParams(findObject: Partial<UserInterface>) {\r\n    return UserModel.findOne({findObject});\r\n  }\r\n}\r\n\r\nexport const userService = new UserService();\r\n"]}