{"version":3,"file":"check-is-phone-exists.middleware.js","sourceRoot":"","sources":["../../../src/middleware/user/check-is-phone-exists.middleware.ts"],"names":[],"mappings":";;;AACA,6CAA2C;AAC3C,yCAAwD;AAG3C,QAAA,4BAA4B,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAiB,EAAE;IACnH,MAAM,EAAC,KAAK,EAAC,GAAG,GAAG,CAAC,IAAqB,CAAC;IAC1C,MAAM,WAAW,GAAG,MAAM,sBAAW,CAAC,eAAe,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC;IAE/D,IAAI,WAAW,EAAE;QACf,OAAO,IAAI,CAAC,IAAI,qBAAY,CAC1B,GAAG,EACH,qBAAY,CAAC,2BAA2B,CAAC,OAAO,EAChD,qBAAY,CAAC,2BAA2B,CAAC,IAAI,CAC9C,CAAC,CAAC;KACJ;IAED,IAAI,EAAE,CAAC;AACT,CAAC,CAAC","sourcesContent":["import {NextFunction, Request, Response} from 'express';\r\nimport {userService} from '../../services';\r\nimport {customErrors, ErrorHandler} from '../../errors';\r\nimport {UserInterface} from '../../models';\r\n\r\nexport const checkIsPhoneExistsMiddleware = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n  const {phone} = req.body as UserInterface;\r\n  const userByPhone = await userService.findOneByParams({phone});\r\n\r\n  if (userByPhone) {\r\n    return next(new ErrorHandler(\r\n      400,\r\n      customErrors.BAD_REQUEST_USER_REGISTERED.message,\r\n      customErrors.BAD_REQUEST_USER_REGISTERED.code\r\n    ));\r\n  }\r\n\r\n  next();\r\n};\r\n"]}