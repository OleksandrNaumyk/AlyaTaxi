{"version":3,"file":"check-is-user-exist.middleware.js","sourceRoot":"","sources":["../../../src/middleware/user/check-is-user-exist.middleware.ts"],"names":[],"mappings":";;;AAAA,+CAAwD;AACxD,yCAAwD;AAGxD,6CAA2C;AAE9B,QAAA,0BAA0B,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAkB,EAAiB,EAAE;IACjH,MAAM,EAAC,KAAK,EAAC,GAAG,GAAG,CAAC,IAAqB,CAAC;IAE1C,MAAM,WAAW,GAAG,MAAM,sBAAW,CAAC,eAAe,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC;IAE/D,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,IAAI,CAAC,IAAI,qBAAY,CAAC,mCAAuB,CAAC,SAAS,EAAE,qBAAY,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;KAClG;IAED,IAAI,EAAE,CAAC;AACT,CAAC,CAAC","sourcesContent":["import {ResponseStatusCodesEnum} from '../../constants';\r\nimport {customErrors, ErrorHandler} from '../../errors';\r\nimport {NextFunction, Request, Response} from 'express';\r\nimport {UserInterface} from '../../models';\r\nimport {userService} from '../../services';\r\n\r\nexport const checkIsUserExistMiddleware = async (req: Request, res: Response, next: NextFunction): Promise<void> => {\r\n  const {phone} = req.body as UserInterface;\r\n\r\n  const userByPhone = await userService.findOneByParams({phone});\r\n\r\n  if (!userByPhone) {\r\n    return next(new ErrorHandler(ResponseStatusCodesEnum.NOT_FOUND, customErrors.NOT_FOUND.message));\r\n  }\r\n\r\n  next();\r\n};\r\n"]}