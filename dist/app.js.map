{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":"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","sourcesContent":["import {NextFunction, Request, Response} from 'express';\r\n\r\nimport * as cors from 'cors';\r\nimport * as express from 'express';\r\nimport * as rateLimit from 'express-rate-limit';\r\nimport * as helmet from 'helmet';\r\nimport * as dotenv from 'dotenv';\r\nimport * as morgan from 'morgan';\r\nimport * as path from 'path';\r\nimport * as mongoose from 'mongoose';\r\nimport {config} from './config';\r\nimport {adminRouter, driverRouter, tripRouter, userRouter} from './routes';\r\nimport {ResponseStatusCodesEnum} from './constants';\r\n\r\ndotenv.config();\r\n\r\nconst serverRequestLimit = rateLimit({\r\n  windowMs: config.serverRateLimits.period,\r\n  max: config.serverRateLimits.maxRequests\r\n});\r\n\r\nclass App {\r\n  public readonly app: express.Application = express();\r\n\r\n  constructor() {\r\n    (global as any).appRoot = path.resolve(process.cwd(), '../');\r\n\r\n    this.app.use(morgan('dev'));\r\n    this.app.use(helmet());\r\n    this.app.use(serverRequestLimit);\r\n    this.app.use(cors({\r\n      origin: this.configureCors\r\n    }));\r\n\r\n    this.app.use(express.json());\r\n    this.app.use(express.urlencoded({extended: true}));\r\n\r\n    this.app.use(express.static(path.resolve((global as any).appRoot, 'public')));\r\n\r\n    this.mountRoutes();\r\n\r\n    this.setupDB();\r\n\r\n    this.app.use(this.customErrorHandler);\r\n  }\r\n\r\n  private setupDB(): void {\r\n    mongoose.connect(config.MONGODB_URL, {useNewUrlParser: true});\r\n\r\n    const db = mongoose.connection;\r\n    db.on('error', console.log.bind(console, 'MONGO ERROR'));\r\n  }\r\n\r\n  private customErrorHandler(err: any, req: Request, res: Response, next: NextFunction): void {\r\n    res\r\n      .status(err.status || ResponseStatusCodesEnum.SERVER)\r\n      .json({\r\n        message: err.message || 'Unknown Error',\r\n        code: err.code\r\n      });\r\n  }\r\n\r\n  private configureCors = (origin: any, callback: any) => {\r\n    const whiteList = config.ALLOWED_ORIGIN.split(';');\r\n\r\n    if (!origin) { // For PostMan\r\n      return callback(null, true);\r\n    }\r\n\r\n    if (!whiteList.includes(origin)) {\r\n      return callback(new Error('Cors not allowed'), false);\r\n    }\r\n\r\n    return callback(null, true);\r\n  }\r\n\r\n  private mountRoutes(): void {\r\n    this.app.use('/admins', adminRouter);\r\n    this.app.use('/drivers', driverRouter);\r\n    this.app.use('/trips', tripRouter);\r\n    this.app.use('/users', userRouter);\r\n  }\r\n}\r\n\r\nexport const app = new App().app;\r\n\r\n"]}