{"version":3,"file":"token-verificator.helper.js","sourceRoot":"","sources":["../../src/helpers/token-verificator.helper.ts"],"names":[],"mappings":";;;AAAA,+CAAkD;AAClD,+BAA+B;AAE/B,4CAAiE;AACjE,sCAAiC;AACjC,sCAAqD;AAErD,MAAM,aAAa,GAAG,gBAAS,CAAC,qBAAM,CAAC,CAAC;AAE3B,QAAA,gBAAgB,GAAG,KAAK,EAAE,MAAkB,EAAE,KAAa,EAAgC,EAAE;IACxG,IAAI;QACF,IAAI,OAAO,CAAC;QAEZ,QAAQ,MAAM,EAAE;YACd,KAAK,sBAAU,CAAC,SAAS;gBACvB,OAAO,GAAG,MAAM,aAAa,CAAC,KAAK,EAAE,eAAM,CAAC,UAAU,CAAiC,CAAC;gBACxF,MAAM;YAER,KAAK,sBAAU,CAAC,aAAa;gBAC3B,OAAO,GAAG,MAAM,aAAa,CAAC,KAAK,EAAE,eAAM,CAAC,wBAAwB,CAAiC,CAAC;gBACtG,MAAM;YAER,KAAK,sBAAU,CAAC,eAAe;gBAC7B,OAAO,GAAG,MAAM,aAAa,CAAC,KAAK,EAAE,eAAM,CAAC,qBAAqB,CAAiC,CAAC;gBACnG,MAAM;YAER;gBACE,MAAM,IAAI,qBAAY,CAAC,mCAAuB,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC;SAC/E;QAED,OAAO,OAAO,CAAC;KAEhB;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,qBAAY,CAAC,mCAAuB,CAAC,YAAY,EAAE,qBAAY,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;KAC3G;AACH,CAAC,CAAC","sourcesContent":["import {verify, VerifyErrors} from 'jsonwebtoken';\r\nimport {promisify} from 'util';\r\n\r\nimport {ActionEnum, ResponseStatusCodesEnum} from '../constants';\r\nimport {config} from '../config';\r\nimport {customErrors, ErrorHandler} from '../errors';\r\n\r\nconst verifyPromise = promisify(verify);\r\n\r\nexport const tokenVerificator = async (action: ActionEnum, token: string): Promise<VerifyErrors | null> => {\r\n  try {\r\n    let isValid;\r\n\r\n    switch (action) {\r\n      case ActionEnum.USER_AUTH:\r\n        isValid = await verifyPromise(token, config.JWT_SECRET) as Promise<VerifyErrors | null>;\r\n        break;\r\n\r\n      case ActionEnum.USER_REGISTER:\r\n        isValid = await verifyPromise(token, config.JWT_CONFIRM_EMAIL_SECRET) as Promise<VerifyErrors | null>;\r\n        break;\r\n\r\n      case ActionEnum.FORGOT_PASSWORD:\r\n        isValid = await verifyPromise(token, config.JWT_PASS_RESET_SECRET) as Promise<VerifyErrors | null>;\r\n        break;\r\n\r\n      default:\r\n        throw new ErrorHandler(ResponseStatusCodesEnum.SERVER, 'wrong Action type');\r\n    }\r\n\r\n    return isValid;\r\n\r\n  } catch (e) {\r\n    throw new ErrorHandler(ResponseStatusCodesEnum.UNAUTHORIZED, customErrors.UNAUTHORIZER_BAD_TOKEN.message);\r\n  }\r\n};\r\n"]}