{"version":3,"file":"auth.controller.js","sourceRoot":"","sources":["../../../src/controller/auth/auth.controller.ts"],"names":[],"mappings":";;;AAAA,qCAAkE;AAGlE,2CAAyD;AACzD,+CAAwF;AACxF,6CAA2C;AAC3C,yCAAwD;AAExD,MAAM,cAAc;IAClB,KAAK,CAAC,QAAQ,CAAC,GAA6B,EAAE,GAAa,EAAE,IAAkB;QAC7E,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,IAAI;YACF,MAAM,EAAC,GAAG,EAAE,QAAQ,EAAC,GAAG,GAAG,CAAC,IAAqB,CAAC;YAClD,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC;YAC1B,MAAM,gBAAgB,GAAG,MAAM,yBAAe,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAE5E,IAAI,CAAC,gBAAgB,EAAE;gBACrB,OAAO,IAAI,CAAC,IAAI,qBAAY,CAAC,mCAAuB,CAAC,SAAS,EAAE,qBAAY,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;aAClG;YAED,MAAM,EAAC,YAAY,EAAE,aAAa,EAAC,GAAG,mBAAS,CAAC,sBAAU,CAAC,SAAS,CAAC,CAAC;YACtE,MAAM,sBAAW,CAAC,eAAe,CAAC;gBAChC,WAAW,EAAE,YAAY;gBACzB,YAAY,EAAE,aAAa;gBAC3B,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;YAEH,GAAG,CAAC,IAAI,CAAC,EAAC,YAAY,EAAE,aAAa,EAAC,CAAC,CAAC;SACzC;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;SAChB;IACH,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;QAC9D,MAAM,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC,8BAAkB,CAAC,aAAa,CAAC,CAAC;QAE9D,MAAM,sBAAW,CAAC,WAAW,CAAC,EAAC,WAAW,EAAC,CAAC,CAAC;QAE7C,kBAAQ,CAAC,UAAU,CAAC,mCAAuB,CAAC,UAAU,CAAC,CAAC;IAC1D,CAAC;CACF;AAEY,QAAA,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC","sourcesContent":["import {NextFunction, Request, response, Response} from 'express';\r\n\r\nimport {RequestExtendedInterface, UserInterface} from '../../models';\r\nimport {comparePassword, tokinizer} from '../../helpers';\r\nimport {ActionEnum, RequestHeadersEnum, ResponseStatusCodesEnum} from '../../constants';\r\nimport {authService} from '../../services';\r\nimport {customErrors, ErrorHandler} from '../../errors';\r\n\r\nclass AuthController {\r\n  async authUser(req: RequestExtendedInterface, res: Response, next: NextFunction) {\r\n    console.log('here');\r\n    try {\r\n      const {_id, password} = req.user as UserInterface;\r\n      const authInfo = req.body;\r\n      const isPasswordEquals = await comparePassword(authInfo.password, password);\r\n\r\n      if (!isPasswordEquals) {\r\n        return next(new ErrorHandler(ResponseStatusCodesEnum.NOT_FOUND, customErrors.NOT_FOUND.message));\r\n      }\r\n\r\n      const {access_token, refresh_token} = tokinizer(ActionEnum.USER_AUTH);\r\n      await authService.createTokenPair({\r\n        accessToken: access_token,\r\n        refreshToken: refresh_token,\r\n        userId: _id\r\n      });\r\n\r\n      res.json({access_token, refresh_token});\r\n    } catch (e) {\r\n      return next(e);\r\n    }\r\n  }\r\n\r\n  async logoutUser(req: Request, res: Response, next: NextFunction) {\r\n    const accessToken = req.get(RequestHeadersEnum.AUTHORIZATION);\r\n\r\n    await authService.removeToken({accessToken});\r\n\r\n    response.sendStatus(ResponseStatusCodesEnum.NO_CONTENT);\r\n  }\r\n}\r\n\r\nexport const authController = new AuthController();\r\n"]}